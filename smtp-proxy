#!/usr/bin/env perl

# Simple SMTP Proxy

# Author Nigel Horne: njh@bandsman.co.uk
# Copyright (C) 2017, Nigel Horne

# Usage is subject to licence terms.
# The licence terms of this software are as follows:
# Personal single user, single computer use: GPL2
# All other users (including Commercial, Charity, Educational, Government)
#	must apply in writing for a licence for use from Nigel Horne at the
#	above e-mail.

use strict;
use warnings;
use IO::Socket::INET;
use Net::Server::Mail::SMTP;
use Net::SMTP;
use Net::DNS;
use Geo::IP;
use Net::Whois::IP;
use Net::Whois::IANA;
use Locale::Country;
use Data::Validate::IP;
use CHI;
use Mail::Address;
# use IPC::SysV;
use Sys::Syslog qw(:standard :macros);
use Config::Auto;
use ClamAV::Client;
use Mail::DKIM::Verifier;

# These can also go in the configuration file
my %usernames = (
	'root' => 'njh',	# Forward e-mails to this recipient
	'njh' => 'njh',		# Must have something like this to allow this recipient
);

openlog 'smtp-proxy', 'cons,pid', 'user';

syslog(LOG_INFO, 'Starting up');

my $ca = Config::Auto->new();
my $config = $ca->parse();

my @local_domains = @{$config->{'main'}->{'local_domains'}};	# FIXME: if there's only one it won't be an array ref
my @pass_through = @{$config->{'main'}->{'pass_through'}};	# FIXME: if there's only one it won't be an array ref
my $masquerade_as = $config->{'main'}->{'masquerade_as'};
my $forward_to = $config->{'main'}->{'forward_to'} or die 'Set forward_to in ' . $ca->file();

if(!defined($forward_to)) {
	die "forward_to is not optional, check the configuration file";
}

my %deny_country;

# use Data::Dumper;
# print Data::Dumper->new([$config])->Dump();
# print Data::Dumper->new([@local_domains])->Dump();

my $resolver = Net::DNS::Resolver->new();
my $iana = Net::Whois::IANA->new();
my $gi;

eval { $gi = Geo::IP->new(GEOIP_STANDARD) };

# Choose your caching mechanism depending on your needs
# my $cache = CHI->new(
	# driver => 'File',
	# root_dir => '/tmp',
	# namespace => $0,
# );
my $cache = CHI->new(driver => 'Memory', datastore => {});
# my $cache = CHI->new(driver => 'SharedMem', shmkey => IPC::SysV::ftok($0));

if(open(my $aliases, '<', '/etc/aliases')) {
	while(<$aliases>) {
		next if(/^#/);
		chomp;
		my @alias = split(/:\s*/, $_, 2);
		if(scalar(@alias) == 2) {
			if($alias[1] =~ /"(.+)"/) {
				$usernames{$alias[0]} = $1;
			} else {
				$usernames{$alias[0]} = $alias[1];
			}
		}
	}
	close $aliases;
}

if($config->{'aliases'}) {
	foreach my $user(keys %{$config->{'aliases'}}) {
		$usernames{$user} = $config->{'aliases'}->{$user};
	}
}

# print Data::Dumper->new([\%usernames])->Dump();

if(scalar($config->{'countries'})) {
	foreach my $country (keys %{$config->{'countries'}}) {
		$deny_country{$country} = $config->{'countries'}->{$country};
	}
}

# print Data::Dumper->new([\%deny_country])->Dump();
my $clamav;
if($config->{'main'}->{'clamav'}) {
	my $way = $config->{'main'}->{'clamav'};
	if($way =~ /^\//) {
		$clamav = ClamAV::Client->new(socket_name => $way);
	} else {
		$clamav = ClamAV::Client->new(socket_host => $way, socket_port => 3310);
	}
	if(!$clamav->ping()) {
		die "Can't talk to ClamAV on $way";
	}
}

my $spamassassin = $config->{'main'}->{'spamassassin'};

my $server = IO::Socket::INET->new(Listen => 1, LocalPort => 25, ReuseAddr => 1) or
	die ("Can't bind to port 25");

$SIG{"CHLD"} = 'IGNORE';	# Automatically reap children

while(my $conn = $server->accept()) {
	local $SIG{TERM} = $SIG{INT} = $SIG{HUP} = sub {
		close $conn;
		$server = undef;
		syslog(LOG_INFO, 'Shutting down');
		exit(1);
	};

	my $ok = 1;
	# print "Connection from ", $conn->peerhost(), "\n";
	syslog(LOG_INFO, "Connection from " . $conn->peerhost() . "\n");

	if(fork > 0) {
		next;
	}

	my $ip = $conn->peerhost();
	if(is_private_ipv4($ip) || is_loopback_ipv4($ip)) {
		$ok = 1;
	} elsif(scalar(keys(%deny_country))) {
		my $country = $gi->country_code_by_addr($ip);

		unless($country) {
			$country = $cache->get($ip);
		}
		unless(defined($country)) {
			# print "$ip: MISS\n";
			my $whois = Net::Whois::IP::whoisip_query($ip);

			if(defined($whois) && exists($whois->{Country})) {
				$country = $whois->{Country};
			}

			if(!defined($country) || ($country !~ /^[A-Z]{2}$/i)) {
				eval {
					$iana->whois_query(-ip => $ip);
				};
				if($@) {
					warn $@;
					$country = undef;
					# Create new object
					my $iana = Net::Whois::IANA->new();
				} else {
					$country = $iana->country();
					if($country !~ /^[A-Z]{2}$/i) {
						$country = undef;
					}
				}
			}
			$cache->set($ip, $country, '1 week');
		} else {
			# print "$ip: HIT\n";
		}

		if($country) {
			$country = uc($country);
			# print "$ip: $country\n";
			if(exists($deny_country{$country})) {
				$country = code2country($country);
				# warn("We don't accept emails from $country");
				syslog(LOG_INFO, "Blocked e-mail from $country");
				print $conn 554, "5.7.1", "We don't accept emails from $country\n";
				$ok = 0;
			}
		} else {
			warn("Can't determine the country for IP $ip");
			# Should tempfail with 220 in connect(), however
			# Sendmail::PMilter forces the argument to be 4xx or 5xx
			# $ctx->setreply(220, '4.7.1', "Can't determine the country for IP $ip");
			syslog(LOG_ERR, "Can't determine the country for $ip");
			print $conn 451, '4.7.1', "Can't determine the country for IP $ip\n";
			# In the realworld, there is an argument for REJECT here
			$ok = 0;
		}
	}

	sleep(1);
	# print "ok = $ok\n";
	if($ok) {
		my $smtp = Net::Server::Mail::SMTP->new( socket => $conn );
		# $smtp->set_callback(MAIL => \&validate_sender);
		$smtp->set_callback(RCPT => \&validate_recipient);
		$smtp->set_callback(DATA => \&forward_message);
		# print "process\n";
		$smtp->process();
	}
	# print "close\n";
	$conn->close();
	# print "bottom of loop\n";
	exit;
}

# sub validate_sender {
	# my($session, $sender) = @_;
	# 
	# print "validate_sender $sender\n";
# }

sub validate_recipient {
	# print "validate_recipient\n";
	my($session, $recipient) = @_;

	my @address = Mail::Address->parse($recipient);

	my $ip = $session->{'in'}->peerhost();
	if(is_private_ipv4($ip) || is_loopback_ipv4($ip)) {
		return(1);
	}
	if(scalar(@pass_through) && grep($_ eq $recipient, @pass_through)) {
		return(1);
	}

	my $domain = $address[0]->host();

	if(not defined $domain) {
		return(0, 513, 'Syntax error.');
	} elsif(scalar(@local_domains) && (grep($_ eq $domain, @local_domains) == 0)) {
		syslog(LOG_INFO, "$recipient: Recipient address rejected: Relay access denied to '$domain'");
		return(0, 554, "$recipient: Recipient address rejected: Relay access denied to '$domain'");
	}

	my $user = $address[0]->user();
	if(!defined($usernames{$user})) {
		syslog(LOG_INFO, "$user: Recipient address rejected: Unknown user");
		return(0, 554, "$user: Recipient address rejected: Unknown user");
	}

	return(1);
}

sub forward_message
{
	# print "forward_message\n";
	my($session, $data) = @_;

	my $sender = $session->get_sender();

	return(0, 554, 'Error: no valid sender') unless(defined($sender));

	my @recipients = $session->get_recipients();

	return(0, 554, 'Error: no valid recipients')
		unless(scalar(@recipients));

	my $ip = $session->{'in'}->peerhost();
	unless(is_private_ipv4($ip) || is_loopback_ipv4($ip)) {
		my $email = "From: $sender\n" . join("\n", map { 'To: ' . $_ . "\n" } @recipients) . "\n" . $$data;
		# FIXME: do ulimit to get maximum pipe size
		my @chunks = unpack("(A512)*", $email);	# split into smaller chunks
		# print scalar(@chunks), " chunks\n";
		if($clamav) {
			# print "ClamAV\n";
			if(my $virus = $clamav->scan_scalar(\$email)) {
				syslog(LOG_INFO, "ClamAV prevented acceptance ($virus)");
				return(0, 554, 'Not forwarding your spam or virus');
			}
		}

		# Gets SIGPIPE after 1024 x 512 bytes
		if($spamassassin && (scalar(@chunks) < 1024) && open(my $pout, '|-', $spamassassin)) {
			# print "SpamAssassin: $spamassassin\n";
			local $SIG{PIPE} = sub { die "SpamAssassin pipe died" };
			foreach my $chunk(@chunks) {
				print $pout $chunk;
			}
			# print "close\n";
			close $pout;
			if($?) {
				# print "spam blocked\n";
				syslog(LOG_INFO, "Spamassassin prevented acceptance");
				return(0, 554, "Not forwarding your spam or virus");
			}
		}

		if($config->{'main'}->{'enable_dkim'}) {
			# print "DKIM\n";
			my $dkim = Mail::DKIM::Verifier->new();
			$dkim->PRINT($email);
			$dkim->CLOSE();

			if($dkim->result() eq 'fail') {
				syslog(LOG_INFO, "DKIM result: " . $dkim->result());
				return(0, 554, "Not forwarding your spam or virus");
			}
		}
	}

	# print "Open connection to $forward_to\n";
	my $smtp = Net::SMTP->new($forward_to);

	if(!defined($smtp)) {
		syslog(LOG_ERR, "Can't connect to $forward_to");
		return(0, 471, "Temporary problem connecting to $forward_to, try again later");
	}

	$smtp->mail($sender);
	my $count = 0;

	foreach my $recipient(@recipients) {
		if(scalar(@pass_through) && grep($_ eq $recipient, @pass_through)) {
			syslog(LOG_INFO, "Requested to send passthrough to $recipient");
			$smtp->recipient($recipient);
			$count++;
		} else {
			my @address = Mail::Address->parse($recipient);
			my $domain = $address[0]->host();
			if(my $rc = $usernames{$address[0]->user()}) {
				if($domain && scalar(@local_domains) && (grep($_ eq $domain, @local_domains) > 0)) {
					$recipient = $rc;
				}
			} else {
				syslog(LOG_WARNING, "Can't find $recipient in the usernames table");
			}

			if($recipient =~ /^\|.+/) {	# TODO
				syslog(LOG_INFO, "$recipient: piped output not yet supported, try again later");
				return(0, 451, "$recipient: piped output not yet supported, try again later");
			}
			if($recipient =~ /^\/.+/) {
				# The most common case is /dev/null
				if(open(my $fout, '>>', $recipient)) {
					print $fout $$data;
					close $fout;
					syslog(LOG_INFO, "Data appended to $recipient");
					next;
				}
				syslog(LOG_ERR, "Couldn't open $recipient for writing");
				return(0, 451, "Couldn't open $recipient for writing");
			}
			if($masquerade_as) {
				if(scalar(@local_domains) && (grep($_ eq $domain, @local_domains) > 0)) {
					syslog(LOG_INFO, "Requested to send to $recipient\@$masquerade_as");
					$smtp->recipient("$recipient\@$masquerade_as") or return(0, 471, "Temporary problem sending to $recipient, try again later");
				} else {
					syslog(LOG_INFO, "Requested to send to $recipient");
					$smtp->recipient($recipient) or return(0, 471, "Temporary problem sending to $recipient, try again later");
				}
			} elsif(is_private_ipv4($ip) || is_loopback_ipv4($ip)) {
				syslog(LOG_INFO, "Send local e-mail to $recipient");
				$smtp->recipient($recipient) or return(0, 554, "Can't send to $recipient");
			} else {
				return(0, 554, "You don't have permission to send e-mail to $recipient");
			}
			$count++;
		}
	}

	if($count) {
		# FIXME:  add "received by" header, though Net::Server::Mail::SMTP should do that, really
		$smtp->data($$data) or return(0, 554, 'Something went wrong');
	} else {
		syslog(LOG_INFO, 'No e-mail recipients given');
	}

	$smtp->quit();

	# my $msgid = add_queue($sender, \@recipients, $data)
	  # or return(0);

	# return(1, 250, "message queued $msgid");

	syslog(LOG_INFO, 'message sent');
	return(1, 250, 'message sent');
}
